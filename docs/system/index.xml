<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luckywinds</title>
    <link>https://luckywinds.github.io/docs/system/</link>
    <description>Recent content on Luckywinds</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://luckywinds.github.io/docs/system/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://luckywinds.github.io/docs/system/service-mesh/istio-bookinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luckywinds.github.io/docs/system/service-mesh/istio-bookinfo/</guid>
      <description>理解Bookinfo 资源列表 $ kubectl get svc,pod,gateway,virtualservice -n bookNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEservice/details ClusterIP 10.107.54.71 &amp;lt;none&amp;gt; 9080/TCP 5h14mservice/productpage ClusterIP 10.102.44.220 &amp;lt;none&amp;gt; 9080/TCP 5h14mservice/ratings ClusterIP 10.110.60.146 &amp;lt;none&amp;gt; 9080/TCP 5h14mservice/reviews ClusterIP 10.102.61.22 &amp;lt;none&amp;gt; 9080/TCP 5h14mNAME READY STATUS RESTARTS AGEpod/details-v1-74f858558f-xnvwz 2/2 Running 0 5h14mpod/productpage-v1-76589d9fdc-knv7t 2/2 Running 0 5h14mpod/ratings-v1-7855f5bcb9-blrkh 2/2 Running 0 5h14mpod/reviews-v1-64bc5454b9-6d96p 2/2 Running 0 5h14mpod/reviews-v2-76c64d4bdf-6xmb6 2/2 Running 0 5h14mpod/reviews-v3-5545c7c78f-j8bxg 2/2 Running 0 5h14mNAME AGEgateway.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://luckywinds.github.io/docs/system/service-mesh/istio-docker-desktop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luckywinds.github.io/docs/system/service-mesh/istio-docker-desktop/</guid>
      <description>Docker Desktop for Istio 环境 Windows 10
设置vmcompute：
 Windows安全中心 应用和浏览器控制 Exploit Protection 设置 程序设置 vmcompute.exe 编辑 控制流保护(CFG) 替代系统设置，取消勾选 net start vmcompute  Docker Desktop community 2.2.0.4
设置Resources
 ADVANCED：4U8G PROXIES：HTTP和HTTPS，http://docker.for.win.localhost:3128替代http://127.0.0.1:3128 NETWORK：DNS，8.8.8.8 登录Docker Hub 切换Kubernetes至docker-desktop  部署Istio  istio-1.5.1-win.zip
 cd istio-1.5.1 复制bin\istioctl.exe至C:\Program Files\Docker\Docker\resources\bin
 $ istioctl manifest apply --set profile=demoDetected that your cluster does not support third party JWT authentication. Falling back to less secure first party JWT.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://luckywinds.github.io/docs/system/service-mesh/istio-observability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luckywinds.github.io/docs/system/service-mesh/istio-observability/</guid>
      <description>理解Istio可观察性 分布式追踪 分布式追踪可以让用户对跨多个分布式服务网格的 1 个请求进行追踪分析。
Istio 利用 Envoy 的分布式追踪功能提供了开箱即用的追踪集成。
原理：Istio利用应用程序传入请求和传出的请求中的请求头信息，proxy将相关span信息发送至后端服务，然后通过span信息将服务间调用信息串联起来
请求头信息列表：
 x-request-id x-b3-traceid x-b3-spanid x-b3-parentspanid x-b3-sampled x-b3-flags x-ot-span-context  在业务应用中增加信息：
@GET@Path(&amp;quot;/reviews/{productId}&amp;quot;)public Response bookReviewsById(@PathParam(&amp;quot;productId&amp;quot;) int productId,@HeaderParam(&amp;quot;end-user&amp;quot;) String user,@HeaderParam(&amp;quot;x-request-id&amp;quot;) String xreq,@HeaderParam(&amp;quot;x-b3-traceid&amp;quot;) String xtraceid,@HeaderParam(&amp;quot;x-b3-spanid&amp;quot;) String xspanid,@HeaderParam(&amp;quot;x-b3-parentspanid&amp;quot;) String xparentspanid,@HeaderParam(&amp;quot;x-b3-sampled&amp;quot;) String xsampled,@HeaderParam(&amp;quot;x-b3-flags&amp;quot;) String xflags,@HeaderParam(&amp;quot;x-ot-span-context&amp;quot;) String xotspan) {if (ratings_enabled) {JsonObject ratingsResponse = getRatings(Integer.toString(productId), user, xreq, xtraceid, xspanid, xparentspanid, xsampled, xflags, xotspan); Istio默认对每条请求都进行采样，可以通过参数values.pilot.traceSampling调整采样率</description>
    </item>
    
    <item>
      <title></title>
      <link>https://luckywinds.github.io/docs/system/service-mesh/istio-sidecar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luckywinds.github.io/docs/system/service-mesh/istio-sidecar/</guid>
      <description>理解Istio网格中Envoy代理Sidecar Sidecar简介  Sidecar设计模式允许你为应用程序添加许多功能，而无需额外第三方组件的配置和代码的修改。 Sidecar应用是连接到父应用并且为其扩展或者增强功能，可观察性、监控、日志记录、配置、断路器等。 Sidecar应用与主应用程序松散耦合。  注入方式  istio通过修改deployment配置完成相关内容注入
 k8s自动注入  Kubernetes通过Admission Controller可以拦截所有发往Api server的请求 Istio通过MutatingAdmissionWebhook（变更类型Admission Controller）完成对deployment的请求修改 自定义配置通过ConfigMap获取  $ kubectl get configmap istio-sidecar-injector -n istio-systemNAME DATA AGEistio-sidecar-injector 2 28histioctl手工注入 istioctl kube-inject -f samples/sleep/sleep.yaml | kubectl apply -f -
注入内容 Istio sidecar向应用pod中注入2个容器：
 init，初始化Envoy环境，配置iptables规则，拦截所有进出口流量至proxy istio-proxy，Envoy代理，运行pilot-agent和envoy进程   Pilot-agent负责管理Envoy进程，重启、静态配置热加载等 Envoy动态配置通过xDS更新  未注入Sidecar的deployment：
$ kubectl describe pod productpage-v1-76589d9fdc-8wtsk -n book2Name: productpage-v1-76589d9fdc-8wtskNamespace: book2Priority: 0Node: docker-desktop/192.168.65.3Start Time: Sat, 04 Apr 2020 15:08:29 +0800Labels: app=productpagepod-template-hash=76589d9fdcversion=v1Annotations: &amp;lt;none&amp;gt;Status: RunningIP: 10.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://luckywinds.github.io/docs/system/service-mesh/istio-traffic-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luckywinds.github.io/docs/system/service-mesh/istio-traffic-management/</guid>
      <description>理解Istio流量管理  参考官网：https://istio.io/zh/docs/tasks/traffic-management/
 Istio核心概念：
 Gateway定义服务出入口 Virtual Service定义服务路由策略 Destination Rule定义服务子集、负载均衡、连接池等信息  Envoy核心概念：
 Listener，监听器，命名网地址可以被下游客户端连接，由LDS提供动态配置接口 Router，路由，一组将虚拟主机(virtual hosts)与群集(cluster)匹配的规则(rule)，允许创建流量转移规则，由RDS提供动态配置接口 Cluster，集群，指Envoy连接到的逻辑上相同的一组上游主机，由CDS提供动态配置接口 Endpoint，端点，群集(Cluster)中可用的IP和端口，由EDS提供动态配置接口  原理：Istio配置下发后，转换为Envoy配置后在proxy上生效，实现Istio策略下发，Envoy流量控制，完成整体服务网格流量管理
配置请求路由 设置服务集、路由
$ kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml -n bookdestinationrule.networking.istio.io/productpage createddestinationrule.networking.istio.io/reviews createddestinationrule.networking.istio.io/ratings createddestinationrule.networking.istio.io/details created$ kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml -n bookvirtualservice.networking.istio.io/productpage createdvirtualservice.networking.istio.io/reviews createdvirtualservice.networking.istio.io/ratings createdvirtualservice.networking.istio.io/details created destination-rule-all.yaml，根据pod的标签version值划分服务子集 virtual-service-all-v1.yaml，定义路径策略，将各服务请求默认路由至v1版本  Virtual Service如果关联了Gateway则同时在具体ingressgateway的proxy上生效，用于服务入口控制，例如productpage
apiVersion: networking.istio.io/v1alpha3kind: VirtualServicemetadata:name: productpage...spec:gateways:- bookinfo-gateway- meshhosts:- productpagehttp:- route:- destination:host: productpagesubset: v1$ istioctl proxy-config route reviews-v1-64bc5454b9-6d96p -n book -o json --name 9080.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://luckywinds.github.io/docs/system/service-mesh/istio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luckywinds.github.io/docs/system/service-mesh/istio/</guid>
      <description>Istio简介  Istio是service mesh的一种
 核心特性  流量管理：限流、熔断、故障注入等 安全：认证、授权、加密等 监测：跟踪、监控、日志等  架构 Istio逻辑上分为数据面（data plane）和控制面（control plane）
 数据面：由sidecar模式部署的Envoy代理组成，控制微服务之间的网络通信 控制面：管理和配置sidecar代理服务上  组件：
 Envoy：高性能的代理服务，代理微服务所有的出入流量 Pilot：服务发现、智能路由、网络韧性（超时、重试、熔断等） Citadel：安全管理 Galley：策略管理   Polit通过调用第三方云平台（k8s等）接口获取服务发现能力 Polit提供接口支持外部服务配置，和第三方云平台服务发现的内容，一起抽象出Istio自己的服务模型 Polit适配Envoy提供xDS（LDS、RDS、CDS、EDS等）服务接口，支持配置动态能力  组件  istio-citadel，安全管理 istio-galley，配置管理 istio-pilot，服务发现、智能路由、策略控制 istio-ingressgateway，入口管理 istio-egressgateway，出口管理 istio-policy，访问控制管理 istio-telemetry，服务监测管理 istio-sidecar-injector，代理管理  网络  外部流量通过Gateway进入集群，提供基本控制能力，例如port、tls、limit等 通过Virtual Service实现不同版本的Service服务路由能力，例如headers/url/weight等，支持蓝绿、金丝雀、故障注入等能力 Service内部支持LB负载配置，精确控制各实例访问控制策略  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://luckywinds.github.io/docs/system/system-design-primer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luckywinds.github.io/docs/system/system-design-primer/</guid>
      <description>系统设计入门 概览  DNS，第一层路由 CDN，第二层缓存 LB，第三层负载 Web Server和API，前后分离 Queue，消息队列 Cache，缓存 SQL，读写分离 NoSql，对象存储  DNS 域名结构：
 分层管理
 域名解析：
递归：
迭代：
资源类型：
 NS 记录（域名服务） ─ 指定解析域名或子域名的DNS服务器。 MX 记录（邮件交换） ─ 指定接收信息的邮件服务器。 A 记录（地址） ─ 指定域名对应的IP地址记录。 CNAME（规范） ─ 一个域名映射到另一个域名或CNAME记录（example.com指向www.example.com）或映射到一个A记录。  优缺点：
 延迟 DDOS 不可或缺  CDN 作用：
CDN是一个全球性的代理服务器分布式网络，它从靠近用户的位置提供内容。通常，HTML/CSS/JS，图片和视频等静态内容由CDN提供。
 从靠近用户的数据中心提供资源 通过CDN，服务器不必真的处理请求  内容更新模式：
 推送（push）：服务器上内容发生变动时，推送新内容给CDN，并重写URL地址以指向新内容的CDN地址。流量最小化，但储存最大化。 拉取（pull）：当第一个用户请求该资源时，从服务器上拉取资源，存活时间（TTL）决定缓存多久时间。最小化储存空间，有冗余流量。适合高流量站点  优缺点：
 减低服务请求压力 流量贵 过期，内容更新  LB  LB和Proxy，在大多场景基本是等效的，LB可以运行在Proxy模式，Proxy可以提供LB功能
 特性：
主要任务：
 位于客户端和服务端之间</description>
    </item>
    
  </channel>
</rss>